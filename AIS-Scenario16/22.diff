--- ArduCopter/GCS_Mavlink.cpp
+++ ArduCopter/GCS_Mavlink.cpp
@@ -817,91 +817,7 @@
         // decode packet
         mavlink_command_int_t packet;
         mavlink_msg_command_int_decode(msg, &packet);
-        switch(packet.command)
-        {
-            case 222: { // AIS Floating_point_exception
-              double x;
-              double y;
-              double r = 9.0;
-              hal.console->printf("AIS-MAVLINK_MSG_ID_COMMAND_INT : %d, %f, %f, %f, %f, %d, %d, %f\n", packet.command, packet.param1, packet.param2, packet.param3, packet.param4, packet.x, packet.y, packet.z);
-              x = (double)packet.param1 / 10.0;
-              y = (double)packet.param2 / 10.0;
-              hal.console->printf("AIS-MAVLINK_MSG_ID_COMMAND_INT: Will div %f by %f\n", x, y);
-              r = x / y;
-              hal.console->printf("AIS-MAVLINK_MSG_ID_COMMAND_INT: result is: %f\n", r);
-              result = MAV_RESULT_ACCEPTED;
-              break;
-            } // AIS - Floating_point_exception
-
-            case MAV_CMD_DO_SET_HOME: {
-                // assume failure
-                result = MAV_RESULT_FAILED;
-                if (is_equal(packet.param1, 1.0f)) {
-                    // if param1 is 1, use current location
-                    if (copter.set_home_to_current_location(true)) {
-                        result = MAV_RESULT_ACCEPTED;
-                    }
-                    break;
-                }
-                // ensure param1 is zero
-                if (!is_zero(packet.param1)) {
-                    break;
-                }
-                // check frame type is supported
-                if (packet.frame != MAV_FRAME_GLOBAL &&
-                    packet.frame != MAV_FRAME_GLOBAL_INT &&
-                    packet.frame != MAV_FRAME_GLOBAL_RELATIVE_ALT &&
-                    packet.frame != MAV_FRAME_GLOBAL_RELATIVE_ALT_INT) {
-                    break;
-                }
-                // sanity check location
-                if (!check_latlng(packet.x, packet.y)) {
-                    break;
-                }
-                Location new_home_loc {};
-                new_home_loc.lat = packet.x;
-                new_home_loc.lng = packet.y;
-                new_home_loc.alt = packet.z * 100;
-                // handle relative altitude
-                if (packet.frame == MAV_FRAME_GLOBAL_RELATIVE_ALT || packet.frame == MAV_FRAME_GLOBAL_RELATIVE_ALT_INT) {
-                    if (copter.ap.home_state == HOME_UNSET) {
-                        // cannot use relative altitude if home is not set
-                        break;
-                    }
-                    new_home_loc.alt += copter.ahrs.get_home().alt;
-                }
-                if (copter.set_home(new_home_loc, true)) {
-                    result = MAV_RESULT_ACCEPTED;
-                }
-                break;
-            }
-
-            case MAV_CMD_DO_SET_ROI: {
-                // param1 : /* Region of interest mode (not used)*/
-                // param2 : /* MISSION index/ target ID (not used)*/
-                // param3 : /* ROI index (not used)*/
-                // param4 : /* empty */
-                // x : lat
-                // y : lon
-                // z : alt
-                // sanity check location
-                if (!check_latlng(packet.x, packet.y)) {
-                    break;
-                }
-                Location roi_loc;
-                roi_loc.lat = packet.x;
-                roi_loc.lng = packet.y;
-                roi_loc.alt = (int32_t)(packet.z * 100.0f);
-                copter.set_auto_yaw_roi(roi_loc);
-                result = MAV_RESULT_ACCEPTED;
-                break;
-            }
-
-            default:
-                result = MAV_RESULT_UNSUPPORTED;
-                break;
-        }
-
+        this->send_message(MSG_AHRS);
         // send ACK or NAK
         mavlink_msg_command_ack_send_buf(msg, chan, packet.command, result);
         break;
